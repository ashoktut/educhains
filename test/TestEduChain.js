// This script is designed to test the solidity smart contract - EduChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var EduChain = artifacts.require('EduChain')
const truffleAssert = require('truffle-assertions')

contract('EduChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originStudentID = accounts[1]
    const studentName = "John"
    const studentSurname = "Doe"
    const uniName = "TUT"
    const courseName = "Blockchain" // Course Applying for by person
    var personID = sku + upc
    const bookPrice = web3.utils.toWei("1", "ether") // Book Price
    const monthlyPrice = web3.utils.toWei("1", "ether") // Monthly Price
    const rentPrice = web3.utils.toWei("1", "ether") // Accommodation Price
    const feesPrice = web3.utils.toWei("1", "ether") // University Fees Price
    // uint256 passRate; // Pass rate of the student
    var personState = 0 // Person State as represented in the enum above
    // address studentID; // Metamask-Ethereum address of the student
    const uniID = accounts[2] // Metamask-Ethereum address of the University
    const accommodationID = accounts[3]// Metamask-Ethereum address of the Accommodation
    const nsfasID = accounts[4]// Metamask-Ethereum address of Nsfas
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44
    
    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Student: accounts[1] ", accounts[1])
    console.log("University: accounts[2] ", accounts[2])
    console.log("Accommodation: accounts[3] ", accounts[3])
    console.log("Nsfas: accounts[4] ", accounts[4])
    
    // 1st Test
    it("Testing smart contract function applyUni() that allows a student to apply to university", async() => {
        const eduChain = await EduChain.deployed()
        await eduChain.addStudent(originStudentID)

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Applied_Uni(null, (error, event)=> {
            eventEmitted = true;
        });

        // Mark a person as Applied_Uni by calling function applyUni()
        let result = await eduChain.applyUni(upc, originStudentID, studentName, studentSurname, courseName, uniName, uniID , {from: originStudentID})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferOne = await eduChain.fetchPersonBufferOne.call(upc)
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)

        // Verify the result set
        console.log(resultBufferOne);
        console.log(resultBufferTwo);
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid person SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid person UPC')
        assert.equal(resultBufferOne[2], originStudentID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originStudentID, 'Error: Missing or Invalid originStudentID')
        assert.equal(resultBufferOne[4], studentName, 'Error: Missing or Invalid studentName')
        assert.equal(resultBufferOne[5], studentSurname, 'Error: Missing or Invalid studentSurname')
        //assert.equal(resultBufferTwo[0], personID, 'Error: Invalid personID')
        assert.equal(resultBufferTwo[1], uniName, 'Error: Missing or Invalid uniName')
        assert.equal(resultBufferTwo[2], courseName, 'Error: Missing or Invalid courseName')
        // assert.equal(resultBufferTwo[3], bookPrice, 'Error: Missing or Invalid courseName')
        // assert.equal(resultBufferTwo[4], monthlyPrice, 'Error: Missing or Invalid courseName')
        // assert.equal(resultBufferTwo[5], rentPrice, 'Error: Missing or Invalid courseName')
        // assert.equal(resultBufferTwo[6], feesPrice, 'Error: Missing or Invalid courseName')
        assert.equal(resultBufferTwo[8], uniID, 'Error: Missing or Invalid uniID')
        assert.equal(resultBufferTwo[7], 0, 'Error: Invalid person State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        truffleAssert.eventEmitted(result, 'Applied_Uni');
    })

    // 2nd Test
    it("Testing smart contract function admit() that allows a university to admit a student", async() => {
        const eduChain = await EduChain.deployed()
        await eduChain.addUniversity(uniID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Admitted(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as admitted by calling function admit()
        let result = await eduChain.admit(upc, {from: uniID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)
      
  
        // Verify the result set
        assert.equal(resultBufferTwo[7], 1, 'Error: Invalid Item State');
        assert.equal(resultBufferTwo[8], uniID, 'Error: Invalid University ID')
        // Determine if the event has been emited using 'truffleAssert'
        truffleAssert.eventEmitted(result, 'Admitted');
    })

    // 3rd Test
    it("Testing smart contract function register() that allows a student to register for course", async() => {
        const eduChain = await EduChain.deployed()
        // await eduChain.addUniversity(uniID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Registered(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as admitted by calling function admit()
        let result = await eduChain.register(upc, {from: originStudentID});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Item State');

        // Determine if the event has been emited using 'truffleAssert'
        truffleAssert.eventEmitted(result, 'Registered');
        // assert.equal(resultBufferTwo[12], uniID, 'Error: Invalid University ID')
    }) 

    // 4th test
    it("Testing smart contract function apply_accommodation() that allows a student to apply for accommodation", async() => {
        const eduChain = await EduChain.deployed()
        // await eduChain.addUniversity(uniID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Applied_Accommodation(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as admitted by calling function apply_accommodation()
        let result = await eduChain.apply_accommodation(upc, {from: originStudentID})
        
        // Retrieve the just now saved person from blockchain by calling function fetchItem()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Item State');

        // Determine if the event has been emited using 'truffleAssert'
        truffleAssert.eventEmitted(result, 'Applied_Accommodation');
        // assert.equal(resultBufferTwo[12], uniID, 'Error: Invalid University ID')
    })
    
    // 5th test
    it("Testing smart contract function accepted_accommodation() that allows a student to be accepted for accommodation", async() => {
        const eduChain = await EduChain.deployed()
        // await eduChain.addAccommodation(accommodationID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Accepted(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as admitted by calling function accepted_accommodation()
        let result = await eduChain.accepted_accommodation(upc, {from: accommodationID})
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Item State');
        assert.equal(resultBufferTwo[9], accommodationID, 'Error: Invalid Accommodation ID')
        
        // Determine if the event has been emited using 'truffleAssert'
        truffleAssert.eventEmitted(result, 'Accepted');
    })

    // 6th test
    it("Testing smart contract function register() that allows a student to apply for accommodation", async() => {
        const eduChain = await EduChain.deployed()
        // await eduChain.addUniversity(uniID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Applied_Nsfas(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as admitted by calling function apply_nsfas()
        let result = await eduChain.apply_nsfas(upc, {from: originStudentID})
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)
        
        // Verify the result set
        // Determine if the event has been emited using 'truffleAssert'
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Item State');
        truffleAssert.eventEmitted(result, 'Applied_Nsfas');
        // assert.equal(resultBufferTwo[12], uniID, 'Error: Invalid University ID')
    })

    // 7th test
    it("Testing smart contract function approved_nsfas() that allows a retailer to mark coffee received", async() => {
        const eduChain = await EduChain.deployed()
        await eduChain.addNsfas(nsfasID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        eduChain.Approved(null, (error, event)=>{
            eventEmitted = true
        })

        // Mark an item as Approved by calling function approved_nsfas()
        var event = await eduChain.approved_nsfas(upc,  {from: nsfasID});

        //Determine if the event has been emitted using `truffleAssert`
        truffleAssert.eventEmitted(event, 'Approved');

        //Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await eduChain.fetchItemBufferTwo.call(upc)

        //Verify the result set
        assert.equal(resultBufferTwo[7], 6, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[14], nsfasID, "Error: Invalid Nsfas ID.")
             
    })
    
    // 8th Test
    it("Testing smart contract function reqBookFund() that allows a student to request for book funds from nsfas", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Requested_BookFunds()
        eduChain.Requested_BookFunds(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a student as requested book funds by calling the function reqBookFund()
        let result = await eduChain.reqBookFund(upc, bookPrice, {from: originStudentID})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[7], bookPrice, "Error: Invalid Book Fund Amount")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Requested_BookFunds');
    })

    // 9th Test
    it("Testing smart contract function payBooks() that allows nsfas to pay book funds to student", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Paid_Books()
        eduChain.Paid_Books(null, (error, event)=>{
            eventEmitted = true
        })

        // Mark a student as Paid_Books by calling function payBooks()
        let result = await eduChain.payBooks(upc, {from: nsfasID, value: bookPrice})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferOne = await eduChain.fetchPersonBufferOne.call(upc)
        const resultBufferTwo = await eduChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], nsfasID, "Error: Invalid Owner.")
        assert.equal(resultBufferTwo[14], nsfasID, "Error: Invalid Nsfas ID.")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Paid_Books');
    })

    // 10th test
    it("Testing smart contract function reqMonthlyFund() that allows a student to request for monthly funds from nsfas", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Requested_BookFunds()
        eduChain.Requested_MonthlyFunds(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a student as requested book funds by calling the function reqBookFund()
        let result = await eduChain.reqMonthlyFund(upc, montlhyPrice, {from: originStudentID})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[8], montlhyPrice, "Error: Invalid Monthly Fund Amount")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Requested_MonthlyFunds');
    })

    // 11th Test
    it("Testing smart contract function payMonthly() that allows nsfas to pay monthly funds to student", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Paid_Books()
        eduChain.Paid_Monthly(null, (error, event)=>{
            eventEmitted = true
        })

        // Mark a student as Paid_Books by calling function payBooks()
        let result = await eduChain.payMonthly(upc, {from: nsfasID, value: monthlyPrice})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferOne = await eduChain.fetchPersonBufferOne.call(upc)
        const resultBufferTwo = await eduChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], nsfasID, "Error: Invalid Owner.")
        assert.equal(resultBufferTwo[14], nsfasID, "Error: Invalid Nsfas ID.")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Paid_Monthly');
    })

    // 12th test
    it("Testing smart contract function reqRentFund() that allows rental place to request for rent from nsfas", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Requested_BookFunds()
        eduChain.Requested_Rent(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a student as requested book funds by calling the function reqBookFund()
        let result = await eduChain.reqRentFund(upc, rentPrice, {from: accommodationID})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[9], rentPrice, "Error: Invalid Rent Amount")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Requested_Rent');
    })

    // 13th Test
    it("Testing smart contract function payRent() that allows nsfas to pay monthly funds to student", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Paid_Books()
        eduChain.Paid_Rent(null, (error, event)=>{
            eventEmitted = true
        })

        // Mark a student as Paid_Books by calling function payBooks()
        let result = await eduChain.payRent(upc, {from: nsfasID, value: rentPrice})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferOne = await eduChain.fetchPersonBufferOne.call(upc)
        const resultBufferTwo = await eduChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], nsfasID, "Error: Invalid Owner.")
        assert.equal(resultBufferTwo[14], nsfasID, "Error: Invalid Nsfas ID.")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Paid_Rent');
    })
    // 14th test
    it("Testing smart contract function reqFeesFund() that allows university to request fees from nsfas", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Requested_BookFunds()
        eduChain.Requested_UniFees(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a student as requested book funds by calling the function reqBookFund()
        let result = await eduChain.reqFeesFund(upc, feesPrice, {from: uniID})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[10], feesPrice, "Error: Invalid Rent Amount")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Requested_UniFees');
    })

    // 15th Test
    it("Testing smart contract function payFees() that allows nsfas to pay fees to university", async() => {
        const eduChain = await EduChain.deployed()
        personState++;
        // Declare and initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Paid_Fees()
        eduChain.Paid_Fees(null, (error, event)=>{
            eventEmitted = true
        })

        // Mark a student as Paid_Books by calling function payBooks()
        let result = await eduChain.payFees(upc, {from: nsfasID, value: feesPrice})

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferOne = await eduChain.fetchPersonBufferOne.call(upc)
        const resultBufferTwo = await eduChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], nsfasID, "Error: Invalid Owner.")
        assert.equal(resultBufferTwo[14], nsfasID, "Error: Invalid Nsfas ID.")
        assert.equal(resultBufferTwo[7], personState, 'Error: Invalid Person State')
        truffleAssert.eventEmitted(result, 'Paid_Rent');
    })

});