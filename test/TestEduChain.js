// This script is designed to test the solidity smart contract - EduChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var EduChain = artifacts.require('EduChain')
const truffleAssert = require('truffle-assertions')

contract('EduChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originStudentID = accounts[1]
    const studentName = "John"
    const studentSurname = "Doe"
    const uniName = "TUT"
    const courseName = "Blockchain" // Course Applying for by person
    var personID = sku + upc
    const bookPrice = web3.utils.toWei("1", "ether") // Book Price
    const monthlyPrice = web3.utils.toWei("1", "ether") // Monthly Price
    const rentPrice = web3.utils.toWei("1", "ether") // Accommodation Price
    const feesPrice = web3.utils.toWei("1", "ether") // University Fees Price
    // uint256 passRate; // Pass rate of the student
    var personState = 0 // Person State as represented in the enum above
    // address studentID; // Metamask-Ethereum address of the student
    const uniID = accounts[2] // Metamask-Ethereum address of the University
    const accommodationID = accounts[3]// Metamask-Ethereum address of the Accommodation
    const nsfasID = accounts[4]// Metamask-Ethereum address of Nsfas
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44
    
    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Student: accounts[1] ", accounts[1])
    console.log("University: accounts[2] ", accounts[2])
    console.log("Accommodation: accounts[3] ", accounts[3])
    console.log("Nsfas: accounts[4] ", accounts[4])
    
    // 1st Test
    it("Testing smart contract function applyUni() that allows a student to apply to university", async() => {
        const eduChain = await EduChain.deployed()
        await eduChain.addStudent(originStudentID)

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Applied_Uni(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as Applied_Uni by calling function applyUni()
        let result = await eduChain.applyUni(upc, originStudentID, studentName, studentSurname, uniName, courseName, uniID)

        // Retrieve the just now saved person from blockchain by calling function fetchPerson()
        const resultBufferOne = await eduChain.fetchPersonBufferOne.call(upc)
        const resultBufferTwo = await eduChain.fetchPersonBufferTwo.call(upc)

        // Verify the result set
        console.log(resultBufferOne);
        console.log(resultBufferTwo);
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid person SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid person UPC')
        assert.equal(resultBufferOne[2], originStudentID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originStudentID, 'Error: Missing or Invalid originStudentID')
        assert.equal(resultBufferOne[4], studentName, 'Error: Missing or Invalid studentName')
        assert.equal(resultBufferOne[5], studentSurname, 'Error: Missing or Invalid studentSurname')
        assert.equal(resultBufferTwo[2], personID, 'Error: Invalid personID')
        assert.equal(resultBufferOne[5], uniName, 'Error: Missing or Invalid uniName')
        assert.equal(resultBufferOne[6], courseName, 'Error: Missing or Invalid courseName')
        assert.equal(resultBufferOne[12], uniID, 'Error: Missing or Invalid uniID')
        assert.equal(resultBufferTwo[11], 0, 'Error: Invalid person State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        truffleAssert.eventEmitted(result, 'Applied_Uni');
    })

    // 2nd Test
    it("Testing smart contract function admit() that allows a university to admit a student", async() => {
        const eduChain = await EduChain.deployed()
        await eduChain.addUniversity(uniID)
        personState++;
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Applied_Uni()
        eduChain.Admitted(null, (error, event)=> {
            eventEmitted = true
        })

        // Mark a person as admitted by calling function admit()
        var event = await eduChain.admit(upc, {from: originStudentID});
    })


});